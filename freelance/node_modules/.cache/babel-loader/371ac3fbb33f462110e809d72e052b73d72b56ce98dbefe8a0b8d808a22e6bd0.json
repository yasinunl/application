{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.baseURL = \"http://127.0.0.1:5000/api/\";\n\n/* axios.interceptors.response.use(\r\n    res => res,async error => {\r\n        if(error.response.status === 401){\r\n            try{\r\n                const response = await axios.post('/user/refresh', {},{\r\n                    headers:{\r\n                        Authorization: 'Bearer ' + localStorage.getItem(\"refresh_token\")\r\n                      }\r\n                });\r\n                console.log(\"401\")\r\n                localStorage.setItem(\"access_token\", response.headers.access_token)\r\n            if (response.status === 200){\r\n                console.log(\"200\")\r\n                return axios(error.config)\r\n            }\r\n            }catch{\r\n                console.log(\"carch\")\r\n            }\r\n                \r\n        }\r\n        return error;\r\n    }\r\n) */","map":{"version":3,"names":["axios","defaults","baseURL"],"sources":["D:/Yasinn/React/freelance/src/interceptors/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.baseURL = \"http://127.0.0.1:5000/api/\"\r\n\r\n/* axios.interceptors.response.use(\r\n    res => res,async error => {\r\n        if(error.response.status === 401){\r\n            try{\r\n                const response = await axios.post('/user/refresh', {},{\r\n                    headers:{\r\n                        Authorization: 'Bearer ' + localStorage.getItem(\"refresh_token\")\r\n                      }\r\n                });\r\n                console.log(\"401\")\r\n                localStorage.setItem(\"access_token\", response.headers.access_token)\r\n            if (response.status === 200){\r\n                console.log(\"200\")\r\n                return axios(error.config)\r\n            }\r\n            }catch{\r\n                console.log(\"carch\")\r\n            }\r\n                \r\n        }\r\n        return error;\r\n    }\r\n) */"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,4BAA4B;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}